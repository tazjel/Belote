/// <reference path="_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        'use strict';
        var RootController = (function () {
            function RootController($rootScope, $state, $uibModal, authService, belotServiceUrls, belotWebPaths, belotViewPaths) {
                var _this = this;
                this.$rootScope = $rootScope;
                this.$state = $state;
                this.$uibModal = $uibModal;
                this.authService = authService;
                this.belotServiceUrls = belotServiceUrls;
                this.belotWebPaths = belotWebPaths;
                this.belotViewPaths = belotViewPaths;
                this.redirectedToLogin = false;
                this.onNewUrlState = function (e, toState, toParams, fromState, fromParams) {
                    if (!_this.authService.authentication.isAuth
                        && !_this.redirectedToLogin
                        && toState.name != _this.belotWebPaths.accountLogin.state
                        && toState.name != _this.belotWebPaths.accountRegister.state) {
                        e.preventDefault();
                        _this.redirectToLogin();
                    }
                    else {
                        _this.showLogout = true;
                    }
                };
                $rootScope.controller = this;
                this.cofigureAuthService();
                this.configureUnauthenticatedRedirect($rootScope);
            }
            RootController.prototype.logOut = function () {
                this.authService.logOut();
                this.redirectToLogin();
            };
            RootController.prototype.errorMessage = function (message, time, errorList) {
                if (errorList === void 0) { errorList = null; }
                var modalInstance = this.$uibModal.open({
                    animation: true,
                    templateUrl: this.belotViewPaths.error,
                    controller: 'errorController',
                    size: 'md',
                    resolve: {
                        message: function () {
                            return message;
                        },
                        time: function () {
                            return time;
                        },
                        errorList: function () {
                            return errorList ? errorList : [];
                        }
                    }
                });
            };
            RootController.prototype.hasRemoteTokenRequestFailed = function (rejection) {
                return rejection.status === 400
                    && rejection.config.url == this.belotServiceUrls.authenticationServiceUrl
                    && this.$state.current.name != this.belotWebPaths.accountLogin.state;
            };
            ;
            RootController.prototype.isPasswordSending = function (rejection) {
                return rejection.config.url == this.belotServiceUrls.authenticationServiceUrl
                    && this.$state.current.name == this.belotWebPaths.accountLogin.state;
            };
            RootController.prototype.redirectToLogin = function () {
                var _this = this;
                this.$state.go(this.belotWebPaths.accountLogin.state);
                this.redirectedToLogin = true;
                setTimeout(function () {
                    _this.redirectedToLogin = false;
                }, 200);
            };
            RootController.prototype.cofigureAuthService = function () {
                this.authService.fillAuthData();
            };
            RootController.prototype.configureUnauthenticatedRedirect = function ($rootScope) {
                $rootScope.$on('$stateChangeStart', this.onNewUrlState);
            };
            return RootController;
        }());
        Web.RootController = RootController;
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            //TODO: find interface
            function configureLoadingBar(cfpLoadingBarProvider) {
                cfpLoadingBarProvider.includeSpinner = false;
            }
            Configurations.configureLoadingBar = configureLoadingBar;
        })(Configurations = Web.Configurations || (Web.Configurations = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function confugreInterceptoprs($httpProvider) {
                $httpProvider.interceptors.push(Web.Services.AuthInterceptorService.Factory);
                $httpProvider.interceptors.push(Web.Services.ErrorInterceptorService.Factory);
            }
            Configurations.confugreInterceptoprs = confugreInterceptoprs;
        })(Configurations = Web.Configurations || (Web.Configurations = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function configureRouting($stateProvider, $urlRouterProvider, $locationProvider, belotWebPaths, belotViewPaths, belotServiceUrls) {
                $stateProvider.state(belotWebPaths.home.state, {
                    url: belotWebPaths.home.url,
                    controller: "homeController",
                    templateUrl: belotViewPaths.home
                });
                $stateProvider.state(belotWebPaths.game.state, {
                    url: belotWebPaths.game.url,
                    controller: "gameController",
                    templateUrl: belotViewPaths.game,
                    params: {
                        game_id: 0,
                        service_url: null
                    }
                });
                $stateProvider.state(belotWebPaths.accountLogin.state, {
                    url: belotWebPaths.accountLogin.url,
                    controller: "loginController",
                    templateUrl: belotViewPaths.accountLogin
                });
                $stateProvider.state(belotWebPaths.accountRegister.state, {
                    url: belotWebPaths.accountRegister.url,
                    controller: "account.registerController",
                    templateUrl: belotViewPaths.accountRegister
                });
                $urlRouterProvider.otherwise(belotWebPaths.home.url);
                // use the HTML5 History API
                $locationProvider.html5Mode({
                    enabled: false,
                    requireBase: true
                });
            }
            Configurations.configureRouting = configureRouting;
        })(Configurations = Web.Configurations || (Web.Configurations = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function configureLocalStorage(localStorageServiceProvider) {
                localStorageServiceProvider
                    .setPrefix('belot-web')
                    .setStorageType('localStorage');
            }
            Configurations.configureLocalStorage = configureLocalStorage;
        })(Configurations = Web.Configurations || (Web.Configurations = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Constants;
        (function (Constants) {
            'use strict';
            var UrlState = (function () {
                function UrlState() {
                }
                return UrlState;
            }());
            Constants.UrlState = UrlState;
            var BelotWebPaths = (function () {
                function BelotWebPaths() {
                    this.accountLogin = { url: '/login', state: 'login' };
                    this.accountRegister = { url: '/register', state: 'register' };
                    this.home = { url: '/home', state: 'home' };
                    this.game = { url: '/game/{game_id:int}/{service_url}', state: 'game' };
                    this.room = { url: '/room/{room_id:int}/{service_url}', state: 'room' };
                }
                return BelotWebPaths;
            }());
            Constants.BelotWebPaths = BelotWebPaths;
            var BelotViewPaths = (function () {
                function BelotViewPaths() {
                    this.shared = { modal: './views/shared/modalTemplate.html' };
                    this.accountLogin = './views/account/login.html';
                    this.accountRegister = './views/account/register.html';
                    this.home = './views/home.html';
                    this.error = './views/error.html';
                    this.invitationConfirm = './views/invitationConfirm.html';
                    this.gameCreate = './views/gameCreate.html';
                    this.game = './views/game.html';
                    this.room = './views/room.html';
                }
                return BelotViewPaths;
            }());
            Constants.BelotViewPaths = BelotViewPaths;
            var SharedViewPaths = (function () {
                function SharedViewPaths() {
                }
                return SharedViewPaths;
            }());
            Constants.SharedViewPaths = SharedViewPaths;
        })(Constants = Web.Constants || (Web.Constants = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Constants;
        (function (Constants) {
            'use strict';
            var BelotSettings = (function () {
                function BelotSettings() {
                    this.clientId = '2261c0d1-3e69-4275-ad9a-3ab15bab0e3c';
                }
                return BelotSettings;
            }());
            Constants.BelotSettings = BelotSettings;
        })(Constants = Web.Constants || (Web.Constants = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var ErrorController = (function () {
                function ErrorController($scope, $uibModalInstance, message, time, errorList) {
                    var _this = this;
                    this.$uibModalInstance = $uibModalInstance;
                    this.cancel = function () {
                        _this.$uibModalInstance.dismiss('cancel');
                    };
                    $scope.controller = this;
                    this.scheduleCancel(time);
                    this.model = new Web.Models.Misc.ErrorModel(message, errorList);
                }
                ErrorController.prototype.scheduleCancel = function (time) {
                    setTimeout(this.cancel, time);
                };
                ErrorController.$inject = ['$scope', '$uibModalInstance', 'message', 'time', 'errorList'];
                return ErrorController;
            }());
            Controllers.ErrorController = ErrorController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var IndexController = (function () {
                function IndexController($scope, $state, authService, belotWebPaths) {
                    this.$scope = $scope;
                    this.$state = $state;
                    this.authService = authService;
                    this.belotWebPaths = belotWebPaths;
                    $scope.viewModel = this;
                    this.showLogout = this.authService.authentication.isAuth;
                    this.authentication = authService.authentication;
                }
                IndexController.prototype.redirectToLogin = function () {
                    this.authService.logOut();
                    this.$state.go(this.belotWebPaths.accountLogin.state);
                };
                IndexController.prototype.logOut = function () {
                    this.authService.logOut();
                };
                IndexController.$inject = ['$scope', '$state', 'authService', 'belotWebPaths'];
                return IndexController;
            }());
            Controllers.IndexController = IndexController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            var Account;
            (function (Account) {
                'use strict';
                var LoginController = (function () {
                    function LoginController($scope, $state, authService, belotWebPaths) {
                        var _this = this;
                        this.$scope = $scope;
                        this.$state = $state;
                        this.authService = authService;
                        this.belotWebPaths = belotWebPaths;
                        this.onLoginSucccess = function (response) {
                            _this.$state.go(_this.belotWebPaths.home.state);
                        };
                        this.onLoginFail = function (response) {
                            if (response.data) {
                                _this.errorMessage = response.data.error;
                            }
                            _this.loginData.password = '';
                        };
                        $scope.controller = this;
                        this.errorMessage = "";
                        this.loginData = {
                            userName: "",
                            password: "",
                            rememberMe: ""
                        };
                        this.val = {
                            usernameMinLength: 3,
                            usernameMaxLength: 100,
                            passwordMinLength: 6,
                            passwordMaxLength: 100
                        };
                    }
                    LoginController.prototype.login = function () {
                        this.errorMessage = "";
                        if (this.$scope.loginForm.$valid) {
                            this.authService.login(this.loginData).then(this.onLoginSucccess, this.onLoginFail);
                        }
                        else {
                            this.loginForm.$submitted = true;
                        }
                    };
                    LoginController.$inject = ['$scope', '$state', 'authService', 'belotWebPaths'];
                    return LoginController;
                }());
                Account.LoginController = LoginController;
            })(Account = Controllers.Account || (Controllers.Account = {}));
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            var Account;
            (function (Account) {
                'use strict';
                var RegisterController = (function () {
                    function RegisterController($scope, $state, authService, belotWebPaths) {
                        var _this = this;
                        this.$scope = $scope;
                        this.$state = $state;
                        this.authService = authService;
                        this.belotWebPaths = belotWebPaths;
                        this.onRegisterSucccess = function (response) {
                            _this.$state.go(_this.belotWebPaths.accountLogin.state);
                        };
                        this.onRegisterFail = function (response) {
                            if (response.data) {
                                _this.errorMessage = response.data.message;
                            }
                            _this.model.password = '';
                            _this.repeatPassword = '';
                        };
                        $scope.controller = this;
                        this.errorMessage = "";
                        this.model = {
                            username: "",
                            password: ""
                        };
                    }
                    RegisterController.prototype.register = function () {
                        this.errorMessage = "";
                        if (this.$scope.registerForm.$valid) {
                            this.authService.register(this.model).then(this.onRegisterSucccess, this.onRegisterFail);
                        }
                        else {
                            this.$scope.registerForm.$submitted = true;
                        }
                    };
                    RegisterController.$inject = ['$scope', '$state', 'authService', 'belotWebPaths'];
                    return RegisterController;
                }());
                Account.RegisterController = RegisterController;
            })(Account = Controllers.Account || (Controllers.Account = {}));
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var HomeController = (function () {
                function HomeController($rootScope, $scope, $http, $state, belotWebPaths, belotServiceUrls, belotViewPaths, Hub, $uibModal, hubService, authService) {
                    var _this = this;
                    this.$rootScope = $rootScope;
                    this.$scope = $scope;
                    this.$http = $http;
                    this.$state = $state;
                    this.belotWebPaths = belotWebPaths;
                    this.belotServiceUrls = belotServiceUrls;
                    this.belotViewPaths = belotViewPaths;
                    this.Hub = Hub;
                    this.$uibModal = $uibModal;
                    this.hubService = hubService;
                    this.authService = authService;
                    this.hasInvitedSomeone = false;
                    /*
                    private createUsersHub(): void {
                        this.usersHub = this.hubService.startHub("UsersListHub", {
                            rootPath: this.belotServiceUrls.authenticationServiceUrl + "/signalr",
                            logging: false,
                            listeners: {
                                'setUsersList': this.setUsersList,
                                'handleInvitation': this.handleInvitation,
                                'handleRejection': this.handleRejection,
                                'joinRoom': this.joinRoom
                            },
                            methods: ['InvitePlayer', 'AcceptInvitation', 'RejectInvitation']
                        });
            
                        this.$scope.$on('$stateChangeStart', () => {
                            this.usersHub.disconnect();
                        });
                    }
                    
                    */
                    this.setUsersList = function (users) {
                        var currentUserName = _this.authService.authorizationData.getData().user_name;
                        for (var i in users) {
                            if (users[i].Name == currentUserName) {
                                users[i].Id = null;
                            }
                        }
                        _this.users = users;
                        _this.$scope.$apply();
                    };
                    $scope.controller = this;
                    //this.currentLocaleId = this.authService.authorizationData.getData().locale_id;
                    //this.createUsersHub();
                }
                // TODO: Move invitation to room controller
                /*private invite(userId: string) {
                    this.hasInvitedSomeone = true;
                    this.createRoom(userId)
                        .then((result: angular.IHttpPromiseCallbackArg<number>) => {
                            var roomId = result.data;
                            this.usersHub.invoke('InvitePlayer', userId, roomId, this.currentLocaleId);
                        });
                }
                */
                HomeController.prototype.createRoom = function (userId) {
                    var _this = this;
                    var url = this.getUrlFromCsList(this.authService.authorizationData.getData().locale_urls);
                    this.$http.post(url + "/rooms", userId)
                        .then(function (result) {
                        var roomId = result.data;
                        _this.$state.go(_this.belotWebPaths.room.state, roomId);
                    });
                };
                /*
                private handleInvitation = (firstPlayer: Models.Account.UserListModel, roomId: string, firstLocaleId: number) => {
                    var modalInstance = this.$uibModal.open({
                        animation: true,
                        templateUrl: this.belotViewPaths.invitationConfirm,
                        controller: 'invitationConfirmController',
                        size: 'md',
                        backdrop: 'static',
                        keyboard: false,
                        resolve: {
                            name: function () {
                                return firstPlayer.Name
                            }
                        }
                    });
        
                    modalInstance.result.then(() => {
                        this.usersHub.invoke('AcceptInvitation', firstPlayer, roomId, firstLocaleId, this.currentLocaleId);
                    }, () => {
                        this.usersHub.invoke('RejectInvitation', firstPlayer);
                    });
                }
        
                private handleRejection = (secondPlayer: Models.Account.UserListModel) => {
                    this.$rootScope.controller.errorMessage("Поканата към " + secondPlayer.Name + " беше отказана.", 10000);
                }
        
                private joinRoom = (roomId: number) => {
                    this.$state.go(this.belotWebPaths.room.state, roomId)
                }
        
                */
                HomeController.prototype.getUrlFromCsList = function (csUrls) {
                    var urls = csUrls.split(',');
                    var randomIdx = this.getRandomIntBetween(0, urls.length - 1);
                    return urls[randomIdx];
                };
                HomeController.prototype.getRandomIntBetween = function (min, max) {
                    var randValue = (Math.random() * (max - min + 1)) + "";
                    return parseInt(randValue, 10) + min;
                };
                HomeController.$inject = ['$rootScope', '$scope', '$http', '$state', 'belotWebPaths', 'belotServiceUrls', 'belotViewPaths', 'Hub', '$uibModal', 'hubService', 'authService'];
                return HomeController;
            }());
            Controllers.HomeController = HomeController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var InvitationConfirmController = (function () {
                function InvitationConfirmController($scope, $uibModalInstance, name) {
                    this.$uibModalInstance = $uibModalInstance;
                    this.name = name;
                    $scope.controller = this;
                }
                InvitationConfirmController.prototype.cancel = function () {
                    this.$uibModalInstance.dismiss('cancel');
                };
                InvitationConfirmController.prototype.confirm = function () {
                    this.$uibModalInstance.close();
                };
                ;
                InvitationConfirmController.$inject = ['$scope', '$uibModalInstance', 'name'];
                return InvitationConfirmController;
            }());
            Controllers.InvitationConfirmController = InvitationConfirmController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var RoomController = (function () {
                function RoomController() {
                }
                RoomController.prototype.startGame = function () {
                };
                RoomController.$inject = ['$scope', '$state', 'authService', 'belotWebPaths'];
                return RoomController;
            }());
            Controllers.RoomController = RoomController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Directives;
        (function (Directives) {
            'use strict';
            var ModalDirective = (function () {
                function ModalDirective(belotViewPaths) {
                    var directive = {};
                    directive.restrict = 'E';
                    directive.replace = true;
                    directive.transclude = true;
                    directive.templateUrl = belotViewPaths.shared.modal;
                    directive.link = function postLink(scope, element, attrs) {
                        scope.title = attrs.title;
                    };
                    return directive;
                }
                ModalDirective.$inject = ['belotViewPaths'];
                return ModalDirective;
            }());
            Directives.ModalDirective = ModalDirective;
        })(Directives = Web.Directives || (Web.Directives = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Filters;
        (function (Filters) {
            'use strict';
            //TODO: refactor
            function stringFormat() {
                var s = arguments[0];
                for (var i = 0; i < arguments.length - 1; i++) {
                    var reg = new RegExp("\\{" + i + "\\}", "gm");
                    s = s.replace(reg, arguments[i + 1]);
                }
                return s;
            }
            Filters.stringFormat = stringFormat;
            ;
        })(Filters = Web.Filters || (Web.Filters = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Models;
        (function (Models) {
            var Account;
            (function (Account) {
                'use strict';
                var LoginData = (function () {
                    function LoginData() {
                    }
                    return LoginData;
                }());
                Account.LoginData = LoginData;
                var UserCreateModel = (function () {
                    function UserCreateModel() {
                    }
                    return UserCreateModel;
                }());
                Account.UserCreateModel = UserCreateModel;
                var LoginValidation = (function () {
                    function LoginValidation() {
                    }
                    return LoginValidation;
                }());
                Account.LoginValidation = LoginValidation;
                var Authentication = (function () {
                    function Authentication() {
                    }
                    return Authentication;
                }());
                Account.Authentication = Authentication;
                var AuthorizedData = (function () {
                    function AuthorizedData() {
                    }
                    return AuthorizedData;
                }());
                Account.AuthorizedData = AuthorizedData;
                var UserListModel = (function () {
                    function UserListModel() {
                    }
                    return UserListModel;
                }());
                Account.UserListModel = UserListModel;
                var UserGameModel = (function () {
                    function UserGameModel() {
                    }
                    return UserGameModel;
                }());
                Account.UserGameModel = UserGameModel;
            })(Account = Models.Account || (Models.Account = {}));
        })(Models = Web.Models || (Web.Models = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Models;
        (function (Models) {
            var Misc;
            (function (Misc) {
                'use strict';
                var ErrorModel = (function () {
                    function ErrorModel(message, errorList) {
                        this.message = message;
                        this.errorList = errorList;
                    }
                    return ErrorModel;
                }());
                Misc.ErrorModel = ErrorModel;
            })(Misc = Models.Misc || (Models.Misc = {}));
        })(Models = Web.Models || (Web.Models = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Services;
        (function (Services) {
            'use strict';
            var AuthInterceptorService = (function () {
                function AuthInterceptorService($q, $rootScope, $injector, localStorageService, belotWebPaths) {
                    var _this = this;
                    this.$q = $q;
                    this.$rootScope = $rootScope;
                    this.$injector = $injector;
                    this.localStorageService = localStorageService;
                    this.belotWebPaths = belotWebPaths;
                    this.request = function (config) {
                        config.headers = config.headers || {};
                        var authData = _this.getAuthService().authorizationData.getData();
                        if (authData) {
                            config.headers['Authorization'] = 'Bearer ' + authData.access_token;
                        }
                        return config;
                    };
                    this.responseError = function (rejection) {
                        if (rejection.status === 401 || _this.$rootScope.controller.hasRemoteTokenRequestFailed(rejection)) {
                            _this.redirectToLogin();
                        }
                        return _this.$q.reject(rejection);
                    };
                }
                AuthInterceptorService.Factory = function ($q, $rootScope, $injector, localStorageService, belotWebPaths) {
                    return new AuthInterceptorService($q, $rootScope, $injector, localStorageService, belotWebPaths);
                };
                AuthInterceptorService.prototype.retryRequest = function (config, deferred) {
                    function successCallback(response) {
                        deferred.resolve(response);
                    }
                    function errorCallback(response) {
                        deferred.reject(response);
                    }
                    this.get$http()(config).then(successCallback, errorCallback);
                };
                AuthInterceptorService.prototype.redirectToLogin = function () {
                    this.get$state().go(this.belotWebPaths.accountLogin.state);
                };
                AuthInterceptorService.prototype.get$http = function () {
                    return this.$injector.get('$http');
                };
                AuthInterceptorService.prototype.getAuthService = function () {
                    return this.$injector.get('authService');
                };
                AuthInterceptorService.prototype.get$state = function () {
                    return this.$injector.get('$state');
                };
                AuthInterceptorService.$inject = ['$q', '$rootScope', '$injector', 'localStorageService', 'belotWebPaths'];
                AuthInterceptorService.TOKEN_HEADERS = { 'Content-Type': 'application/x-www-form-urlencoded' };
                return AuthInterceptorService;
            }());
            Services.AuthInterceptorService = AuthInterceptorService;
        })(Services = Web.Services || (Web.Services = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Services;
        (function (Services) {
            'use strict';
            var AuthService = (function () {
                function AuthService($http, $q, localStorageService, belotServiceUrls, belotSettings) {
                    var _this = this;
                    this.$http = $http;
                    this.$q = $q;
                    this.localStorageService = localStorageService;
                    this.belotServiceUrls = belotServiceUrls;
                    this.belotSettings = belotSettings;
                    this.onLoginSuccess = function (response) {
                        response.user_name = _this.loginData.userName;
                        _this.authorizationData.setData(response);
                        _this.authentication.isAuth = true;
                        _this.authentication.userName = _this.loginData.userName;
                        _this.authentication.useRefreshTokens = false;
                        return response;
                    };
                    this.onLoginFail = function (response) {
                        _this.logOut();
                        return null;
                    };
                    this.authorizationData = new AuthorizationData(localStorageService);
                    this.authentication = new Web.Models.Account.Authentication();
                }
                AuthService.prototype.login = function (loginData) {
                    this.loginData = loginData;
                    var data = "grant_type=password&username=" + loginData.userName + "&password=" + loginData.password + "&client_id=" + this.belotSettings.clientId;
                    return this.$http.post(this.belotServiceUrls.authenticationServiceUrl, data, { headers: AuthService.TOKEN_HEADERS })
                        .success(this.onLoginSuccess)
                        .error(this.onLoginFail);
                };
                AuthService.prototype.register = function (user) {
                    return this.$http.post(this.belotServiceUrls.authenticationServiceUrl + "/api/users", user);
                };
                AuthService.prototype.logOut = function () {
                    this.authorizationData.removeData();
                    this.authentication.isAuth = false;
                    this.authentication.userName = "";
                    this.authentication.useRefreshTokens = false;
                };
                AuthService.prototype.fillAuthData = function () {
                    var authData = this.authorizationData.getData();
                    if (authData) {
                        this.authentication.isAuth = true;
                        this.authentication.userName = authData.user_name;
                        this.authentication.useRefreshTokens = true;
                    }
                };
                AuthService.$inject = ['$http', '$q', 'localStorageService', 'belotServiceUrls', 'belotSettings'];
                AuthService.TOKEN_HEADERS = { 'Content-Type': 'application/x-www-form-urlencoded' };
                return AuthService;
            }());
            Services.AuthService = AuthService;
            var AuthorizationData = (function () {
                function AuthorizationData(localStorageService) {
                    this.localStorageService = localStorageService;
                }
                AuthorizationData.prototype.getData = function () {
                    return this.localStorageService.get(AuthorizationData.AUTH_DATA_KEY);
                };
                AuthorizationData.prototype.setData = function (data) {
                    this.localStorageService.set(AuthorizationData.AUTH_DATA_KEY, data);
                };
                AuthorizationData.prototype.removeData = function () {
                    this.localStorageService.remove(AuthorizationData.AUTH_DATA_KEY);
                };
                AuthorizationData.AUTH_DATA_KEY = 'authorizationData';
                return AuthorizationData;
            }());
        })(Services = Web.Services || (Web.Services = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Services;
        (function (Services) {
            'use strict';
            var ErrorInterceptorService = (function () {
                function ErrorInterceptorService($q, $rootScope) {
                    var _this = this;
                    this.$q = $q;
                    this.$rootScope = $rootScope;
                    this.responseError = function (errorResponse) {
                        switch (errorResponse.status) {
                            case 401:
                                break;
                            case 400:
                                if (!_this.$rootScope.controller.hasRemoteTokenRequestFailed(errorResponse)
                                    && !_this.$rootScope.controller.isPasswordSending(errorResponse)) {
                                    _this.handleBadRequest(errorResponse.data);
                                }
                                break;
                            case 409:
                                if (errorResponse.data) {
                                    var message = errorResponse.data.message;
                                    var globalErrors = _this.getGlobalErrors(errorResponse.data);
                                    _this.showMessage(message, 12000, globalErrors);
                                    break;
                                }
                            case 403:
                            case 500:
                                if (errorResponse.data) {
                                    var globalErrors = _this.getGlobalErrors(errorResponse.data);
                                    _this.showMessage(errorResponse.data.message, 6000);
                                    break;
                                }
                            default: {
                                if (errorResponse.status > 0 && errorResponse.data) {
                                    var globalErrors = _this.getGlobalErrors(errorResponse.data);
                                    _this.showMessage('Код ' + errorResponse.status + ': ' + errorResponse.data.message, 6000, globalErrors);
                                }
                                else {
                                    _this.showMessage(JSON.stringify(errorResponse), 6000);
                                }
                                ;
                            }
                        }
                        ;
                        return _this.$q.reject(errorResponse);
                    };
                }
                ErrorInterceptorService.Factory = function ($q, $rootScope) {
                    return new ErrorInterceptorService($q, $rootScope);
                };
                ErrorInterceptorService.prototype.handleBadRequest = function (badRequestResponse) {
                    var message = this.getMessage(badRequestResponse);
                    var globalErrors;
                    var badReq = badRequestResponse;
                    if (badReq.model_errors != null) {
                        globalErrors = this.getModelErrors(badReq);
                    }
                    else {
                        globalErrors = this.getGlobalErrors(badReq);
                    }
                    this.showMessage(message, 6000, globalErrors);
                };
                ErrorInterceptorService.prototype.showMessage = function (content, time, errorList) {
                    if (errorList === void 0) { errorList = null; }
                    this.$rootScope.controller.errorMessage(content, time, errorList);
                };
                ErrorInterceptorService.prototype.getMessage = function (badRequestResponse) {
                    if (badRequestResponse.message) {
                        return badRequestResponse.message;
                    }
                    else {
                        return undefined;
                    }
                };
                ErrorInterceptorService.prototype.getGlobalErrors = function (errorResponse) {
                    return errorResponse.errors;
                };
                ErrorInterceptorService.prototype.getModelErrors = function (badRequestResponse) {
                    if (badRequestResponse.model_errors && badRequestResponse.model_errors[""]) {
                        return badRequestResponse.model_errors[""].errors;
                    }
                    else {
                        return [];
                    }
                };
                ErrorInterceptorService.$inject = ['$q', '$rootScope'];
                return ErrorInterceptorService;
            }());
            Services.ErrorInterceptorService = ErrorInterceptorService;
        })(Services = Web.Services || (Web.Services = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Services;
        (function (Services) {
            'use strict';
            var HubService = (function () {
                function HubService($state, belotWebPaths, authService, Hub) {
                    var _this = this;
                    this.$state = $state;
                    this.belotWebPaths = belotWebPaths;
                    this.authService = authService;
                    this.Hub = Hub;
                    this.hasConnectFailed = false;
                    this.onHubConnectSuccess = function (response) {
                        console.log('Now connected, connection ID=' + _this.hub.connection.id);
                    };
                    this.onHubConnectFail = function (promise) {
                        if (promise.context.status == 401) {
                            _this.redirectToLogin();
                        }
                        console.log('Could not connect');
                    };
                }
                HubService.prototype.startHub = function (hubName, options) {
                    var authData = this.authService.authorizationData.getData();
                    var accessToken = authData != null ? authData.access_token : null;
                    if (!options.queryParams) {
                        options.queryParams = {};
                    }
                    options.queryParams['access_token'] = "Bearer " + accessToken;
                    this.hub = new this.Hub(hubName, options);
                    this.createHub();
                    return this.hub;
                };
                HubService.prototype.createHub = function () {
                    this.hub.connect();
                    this.hub.connection.start()
                        .done(this.onHubConnectSuccess)
                        .fail(this.onHubConnectFail);
                };
                HubService.prototype.redirectToLogin = function () {
                    this.$state.go(this.belotWebPaths.accountLogin.state);
                };
                HubService.$inject = ['$state', 'belotWebPaths', 'authService', 'Hub'];
                return HubService;
            }());
            Services.HubService = HubService;
        })(Services = Web.Services || (Web.Services = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

/// <reference path="../tools/typings/jquery/jquery.d.ts" />
/// <reference path="../tools/typings/angularjs/angular.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-ui-bootstrap.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-ui-router.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-local-storage.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-loading-bar.d.ts" />
/// <reference path="../tools/typings/ladda/ladda.d.ts" />
/// <reference path="../tools/typings/signalr/signalr.d.ts" />
/// <reference path="../tools/typings/angular-signalr-hub/angular-signalr-hub.d.ts" />
/// <reference path="../tools/typings/custom/serviceUrlConstants.d.ts" />
/// <reference path="app.ts" />
/// <reference path="rootController.ts" />
/// <reference path="configurations/applicationConfiguration.ts" />
/// <reference path="configurations/interceptorsConfiguration.ts" />
/// <reference path="configurations/routeConfiguration.ts" />
/// <reference path="configurations/storageConfiguration.ts" />
/// <reference path="constants/applicationConstants.ts" />
/// <reference path="constants/settingsConstants.ts" />
/// <reference path="controllers/errorController.ts" />
/// <reference path="controllers/indexController.ts" />
/// <reference path="controllers/account/loginController.ts" />
/// <reference path="controllers/account/registerController.ts" />
/// <reference path="controllers/homeController.ts" />
/// <reference path="controllers/invitationConfirmController.ts" />
/// <reference path="controllers/roomController.ts" />
/// <reference path="directives/modalDirective.ts" />
/// <reference path="filters/stringFormat.ts" />
/// <reference path="models/account.ts" />
/// <reference path="models/misc.ts" />
/// <reference path="services/authInterceptorService.ts" />
/// <reference path="services/authService.ts" />
/// <reference path="services/errorInterceptorService.ts" />
/// <reference path="services/hubService.ts" /> 

/// <reference path="_all.ts" />
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        'use strict';
        var Configurations = Belot.Web.Configurations;
        var Constants = Belot.Web.Constants;
        var Controllers = Belot.Web.Controllers;
        var Directives = Belot.Web.Directives;
        var Filters = Belot.Web.Filters;
        var Services = Belot.Web.Services;
        var app = angular.module('belot-web', ['ui.router', 'LocalStorageModule', 'angular-loading-bar', 'belot-web-service-url', 'ui.bootstrap', 'ng-file-model', 'SignalR'])
            .constant('belotWebPaths', new Constants.BelotWebPaths())
            .constant('belotViewPaths', new Constants.BelotViewPaths())
            .constant('belotSettings', new Constants.BelotSettings())
            .directive('modal', function (belotViewPaths) { return new Directives.ModalDirective(belotViewPaths); })
            .filter('stringFormat', Filters.stringFormat)
            .service('authService', Services.AuthService)
            .service('hubService', Services.HubService)
            .controller("errorController", Controllers.ErrorController)
            .controller("homeController", Controllers.HomeController)
            .controller("invitationConfirmController", Controllers.InvitationConfirmController)
            .controller("indexController", Controllers.IndexController)
            .controller("loginController", Controllers.Account.LoginController)
            .controller("account.registerController", Controllers.Account.RegisterController)
            .config(['cfpLoadingBarProvider', Configurations.configureLoadingBar])
            .config(['$httpProvider', Configurations.confugreInterceptoprs])
            .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', 'belotWebPaths', 'belotViewPaths', 'belotServiceUrls', Configurations.configureRouting])
            .config(['localStorageServiceProvider', Configurations.configureLocalStorage])
            .run(function ($rootScope, $state, $uibModal, authService, belotServiceUrls, belotWebPaths, belotViewPaths) {
            return initialize($rootScope, $state, $uibModal, authService, belotServiceUrls, belotWebPaths, belotViewPaths);
        });
        function initialize($rootScope, $state, $uibModal, authService, belotServiceUrls, belotWebPaths, belotViewPaths) {
            $rootScope.controller = new Web.RootController($rootScope, $state, $uibModal, authService, belotServiceUrls, belotWebPaths, belotViewPaths);
        }
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Models;
        (function (Models) {
            var Error;
            (function (Error) {
                'use strict';
                var BaseApiError = (function () {
                    function BaseApiError() {
                    }
                    return BaseApiError;
                }());
                Error.BaseApiError = BaseApiError;
                var BadRequestApiError = (function (_super) {
                    __extends(BadRequestApiError, _super);
                    function BadRequestApiError() {
                        _super.apply(this, arguments);
                    }
                    return BadRequestApiError;
                }(BaseApiError));
                Error.BadRequestApiError = BadRequestApiError;
                var AuthError = (function () {
                    function AuthError() {
                    }
                    return AuthError;
                }());
                Error.AuthError = AuthError;
                var BadRequest = (function () {
                    function BadRequest() {
                    }
                    return BadRequest;
                }());
            })(Error = Models.Error || (Models.Error = {}));
        })(Models = Web.Models || (Web.Models = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

var Belot;
(function (Belot) {
    var Web;
    (function (Web) {
        var Models;
        (function (Models) {
            var Game;
            (function (Game) {
                'use strict';
                var CreateRoomModel = (function () {
                    function CreateRoomModel() {
                    }
                    return CreateRoomModel;
                }());
                Game.CreateRoomModel = CreateRoomModel;
                var CreateGameModel = (function () {
                    function CreateGameModel() {
                    }
                    return CreateGameModel;
                }());
                Game.CreateGameModel = CreateGameModel;
            })(Game = Models.Game || (Models.Game = {}));
        })(Models = Web.Models || (Web.Models = {}));
    })(Web = Belot.Web || (Belot.Web = {}));
})(Belot || (Belot = {}));

//# sourceMappingURL=app.min.js.map
